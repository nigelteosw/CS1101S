function swap(A, i, j) {
     let temp = A[i];
     A[i] = A[tail];
     A[j] = temp;
}

function bubblesort_list(lst) {
    const len = length(lst);
    
    for (let i = len - 1; i >= 1; i = i-1) {
        let curr = lst;
        
        for (let j = 0; j < i; j = j+1) {
            let current = head(curr);
            let next = head(tail(curr));
            if (current > next) {
                const tmp = head(curr);
                set_head(curr, next);
                set_head(tail(curr), tmp);
            }
            
            // Traverse through the list
            curr = tail(curr);
        }
    }
}

const LL = list(3, 5, 2, 4, 1);
bubblesort_list(LL);
LL; // should show [1, [2, [3, [4, [5, null]]]]]

// repetition of the same parameters with within each recursive call


const mem = [];
function read(n, k) {
    return mem[n] === undefined
        ? undefined
        : mem[n][k];
}

function write(n, k, value) {
if (mem[n] === undefined) {
    mem[n] = [];
    }
    mem[n][k] = value;
}


function cc(amount, kinds_of_coins) {
    if (amount === 0) {
        return 1;
    }
    else if (amount < 0 || kinds_of_coins === 0) {
        return 0;
    }
    
    else if (read(amount, kinds_of_coins) !== undefined) {
        return read(amount, kinds_of_coins);
    }
    else {
        const temp = cc(amount, kinds_of_coins - 1)
        +
        cc(amount - first_denomination(kinds_of_coins),
        kinds_of_coins);
        write(amount, kinds_of_coins, temp);
        return temp;
    }
}



function first_denomination(kinds_of_coins) {
    return kinds_of_coins === 1 ? 5 :
        kinds_of_coins === 2 ? 10 :
        kinds_of_coins === 3 ? 20 :
        kinds_of_coins === 4 ? 50 :
        kinds_of_coins === 5 ? 100 : 0;
}

// cc(2,5);

// O(n * k)